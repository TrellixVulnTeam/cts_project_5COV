package com.demo.security.service;

import java.util.ArrayList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.demo.security.dao.UserDao;
import com.demo.security.reqres.UserWrapper;

@Service
public class JwtUserDetailsService implements UserDetailsService {

	@Autowired
	UserDao userDao;
	
	@Autowired
	PasswordEncoder passwordEncoder;

	@Autowired
	private AuthenticationManager authenticationManager;

	// hard coded username is used here not database....
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		UserWrapper user = userDao.findByUsername(username);
		if (user == null) {
			throw new UsernameNotFoundException("User not found with username: " + username);
		}
		return new org.springframework.security.core.userdetails.User(user.getUsername(), user.getPassword(),
				new ArrayList<>());
//		if ("priya".equals(username)) {
//			return new User("priya", 
//					//password
//					//"$2a$10$slYQmyNdGzTn7ZLBXBChFOC9f6kFjAqPhccnP6DxlWXx2lPk1C3G6",
//					"$2a$10$8zOxOZKBoBHvCJrkrHK2nu8MXkuLrILdEEDCBJ26505DzCbASEkYO",
//					new ArrayList<>());
//		} else {
//			throw new UsernameNotFoundException("User not found with username: " + username);
//		}
	}

	// pass username and password credentials to authentication manager so
	// authtication can happen
	public void authenticate(String username, String password) throws Exception {
		try {
			// pass username and password so authentication can be handled by authentication
			// manager
			System.out.println("authenticate :" + password);
			authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, passwordEncoder.encode(password)));
		} catch (DisabledException e) {
			throw new Exception("USER_DISABLED", e);
		} catch (BadCredentialsException e) {
			throw new Exception("INVALID_CREDENTIALS", e);
		}
	}
}