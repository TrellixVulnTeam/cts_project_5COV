package com.demo.security.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.demo.security.reqres.JwtRequest;
import com.demo.security.reqres.JwtResponse;
import com.demo.security.service.JwtUserDetailsService;
import com.demo.security.service.UserService;
import com.demo.security.util.JwtTokenUtil;

import io.swagger.annotations.ApiOperation;

@RestController
@CrossOrigin
public class JwtAuthenticationController {

	@Autowired
	private AuthenticationManager authenticationManager;

	@Autowired
	private JwtTokenUtil jwtTokenUtil;

	@Autowired
	private JwtUserDetailsService userDetailsService;
	
	@Autowired
	private UserService userService;


	// @RequestMapping(value = "/authenticate", method = RequestMethod.POST)
	@PostMapping("/authenticate")
	@ApiOperation(value = "Authentication Process ", notes = "Authentication happens and if user authenticate return jwt token ")
	public ResponseEntity<?> createAuthenticationToken(@RequestBody JwtRequest authenticationRequest) throws Exception {
		if (!userService.checkAccountType(authenticationRequest.getUsername(), authenticationRequest.getRole())) {
			Map<Object, Object> response = new HashMap<Object, Object>();
			response.put("status", HttpStatus.UNAUTHORIZED.value());
			response.put("message", "credentials not match with " + authenticationRequest.getRole());
			return ResponseEntity.badRequest().body(response);
		}
		userDetailsService.authenticate(authenticationRequest.getUsername(), authenticationRequest.getPassword());
		final UserDetails userDetails = userDetailsService.loadUserByUsername(authenticationRequest.getUsername());
		final String token = jwtTokenUtil.generateToken(userDetails);
		return ResponseEntity.ok(new JwtResponse(token));
	}

	
}
